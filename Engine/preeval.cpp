#include "position.h"
#include "utils/utils.h"



inline const quint32 BOTH_BIT_PIECE( quint16 t ){return (((quint32)t) << 16) + t;}
inline const quint32 MIRROR_K1(quint32 pos) { return 0xfe - pos; }
const int H = 66;
const int Y = 8;

const int L = 5;

// 开局进攻性最强时的将,兵子力价值表,参考"象眼引擎"
const int K_a[256] = {
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  9,  9,  9, 11, 13, 11,  9,  9,  9,  0,  0,  0,  0,
    0,  0,  0, 39, 49, 69, 84, 89, 84, 69, 49, 39,  0,  0,  0,  0,
    0,  0,  0, 39, 49, 64, 74, 74, 74, 64, 49, 39,  0,  0,  0,  0,
    0,  0,  0, 39, 46, 54, 59, 61, 59, 54, 46, 39,  0,  0,  0,  0,
    0,  0,  0, 45, 37, 41, 54, 59, 54, 41, 37, 45,  0,  0,  0,  0,
    0,  0,  0,  7,  0, 13,  0, 16,  0, 13,  0,  7,  0,  0,  0,  0,
    0,  0,  0,  7,  0,  7,  0, 15,  0,  7,  0,  7,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0, 11, 15, 11,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
};

// 残局进攻性最强时的将,兵子力价值表,参考"象眼引擎"
const int K_b[256] = {
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0, 10, 10, 10, 15, 15, 15, 10, 10, 10,  0,  0,  0,  0,
    0,  0,  0, 50, 55, 60, 85,100, 85, 60, 55, 50,  0,  0,  0,  0,
    0,  0,  0, 65, 70, 70, 75, 75, 75, 70, 70, 65,  0,  0,  0,  0,
    0,  0,  0, 75, 80, 80, 80, 80, 80, 80, 80, 75,  0,  0,  0,  0,
    0,  0,  0, 70, 70, 65, 70, 70, 70, 65, 70, 70,  0,  0,  0,  0,
    0,  0,  0, 50,  0, 40, 45, 45, 45, 40,  0, 50,  0,  0,  0,  0,
    0,  0,  0, 45,  0, 35, 40, 40, 40, 35,  0, 45,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  5,  5, 15,  5,  5,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  3,  3, 13,  3,  3,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  1,  1, 11,  1,  1,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
};

// 开局进攻性最弱时的兵子力价值表,参考"象眼引擎"
const int P_a[256] = {
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  9,  9,  9, 11, 13, 11,  9,  9,  9,  0,  0,  0,  0,
    0,  0,  0, 19, 24, 34, 42, 44, 42, 34, 24, 19,  0,  0,  0,  0,
    0,  0,  0, 19, 24, 32, 37, 37, 37, 32, 24, 19,  0,  0,  0,  0,
    0,  0,  0, 19, 23, 27, 29, 30, 29, 27, 23, 19,  0,  0,  0,  0,
    0,  0,  0, 20, 18, 20, 27, 29, 27, 20, 20, 20,  0,  0,  0,  0,
    0,  0,  0, 15,  0, 19,  0, 25,  0, 19,  0, 15,  0,  0,  0,  0,
    0,  0,  0, 15,  0, 15,  0, 20,  0, 15,  0, 15,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0, 11, 15, 11,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
};

// 残局进攻性最弱时的兵子力价值表,参考"象眼引擎"
const int P_b[256] = {
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0, 10, 10, 10, 15, 15, 15, 10, 10, 10,  0,  0,  0,  0,
    0,  0,  0, 10, 15, 20, 45, 60, 45, 20, 15, 10,  0,  0,  0,  0,
    0,  0,  0, 25, 30, 30, 35, 35, 35, 30, 30, 25,  0,  0,  0,  0,
    0,  0,  0, 35, 40, 40, 45, 45, 45, 40, 40, 35,  0,  0,  0,  0,
    0,  0,  0, 25, 30, 30, 35, 35, 35, 30, 30, 25,  0,  0,  0,  0,
    0,  0,  0, 25,  0, 25, 25, 25, 25, 25,  0, 25,  0,  0,  0,  0,
    0,  0,  0, 20,  0, 20, 20, 20, 20, 20,  0, 20,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  5,  5, 13,  5,  5,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  3,  3, 12,  3,  3,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  1,  1, 11,  1,  1,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
};

// 受威胁性最强的士,象子力价值表,参考"象眼引擎"
const int A_a[256] = {
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0, 40,  0,  0,  0, 40,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0, 38,  0,  0, 40, 43, 40,  0,  0, 38,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0, 43,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0, 40, 40,  0, 40, 40,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0

};

// 受威胁性最弱的士,象子力价值表,参考"象眼引擎"
const int A_b[256] = {
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0, 20,  0,  0,  0, 20,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0, 18,  0,  0, 20, 23, 20,  0,  0, 18,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0, 23,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0, 20, 20,  0, 20, 20,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
};

// 开局马子力价值表, 参考"象眼引擎"
const int N_a[256] = {
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0, 90, 90, 90, 96, 90, 96, 90, 90, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 96,103, 97, 94, 97,103, 96, 90,  0,  0,  0,  0,
    0,  0,  0, 92, 98, 99,103, 99,103, 99, 98, 92,  0,  0,  0,  0,
    0,  0,  0, 93,108,100,107,100,107,100,108, 93,  0,  0,  0,  0,
    0,  0,  0, 90,100, 99,103,104,103, 99,100, 90,  0,  0,  0,  0,
    0,  0,  0, 90, 98,101,102,103,102,101, 98, 90,  0,  0,  0,  0,
    0,  0,  0, 92, 94, 98, 95, 98, 95, 98, 94, 92,  0,  0,  0,  0,
    0,  0,  0, 93, 92, 94, 95, 92, 95, 94, 92, 93,  0,  0,  0,  0,
    0,  0,  0, 85, 90, 92, 93, 78, 93, 92, 90, 85,  0,  0,  0,  0,
    0,  0,  0, 88, 85, 90, 88, 90, 88, 90, 85, 88,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
};

// 残局马子力价值表,"参考象眼引擎"
const int N_b[256] = {
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0, 92, 94, 96, 96, 96, 96, 96, 94, 92,  0,  0,  0,  0,
    0,  0,  0, 94, 96, 98, 98, 98, 98, 98, 96, 94,  0,  0,  0,  0,
    0,  0,  0, 96, 98,100,100,100,100,100, 98, 96,  0,  0,  0,  0,
    0,  0,  0, 96, 98,100,100,100,100,100, 98, 96,  0,  0,  0,  0,
    0,  0,  0, 96, 98,100,100,100,100,100, 98, 96,  0,  0,  0,  0,
    0,  0,  0, 94, 96, 98, 98, 98, 98, 98, 96, 94,  0,  0,  0,  0,
    0,  0,  0, 94, 96, 98, 98, 98, 98, 98, 96, 94,  0,  0,  0,  0,
    0,  0,  0, 92, 94, 96, 96, 96, 96, 96, 94, 92,  0,  0,  0,  0,
    0,  0,  0, 90, 92, 94, 92, 92, 92, 94, 92, 90,  0,  0,  0,  0,
    0,  0,  0, 88, 90, 92, 90, 90, 90, 92, 90, 88,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
};

// 开局车子力价值表,参考"象眼引擎"
const int R_a[256] = {
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,206,208,207,213,214,213,207,208,206,  0,  0,  0,  0,
    0,  0,  0,206,212,209,216,233,216,209,212,206,  0,  0,  0,  0,
    0,  0,  0,206,208,207,214,216,214,207,208,206,  0,  0,  0,  0,
    0,  0,  0,206,213,213,216,216,216,213,213,206,  0,  0,  0,  0,
    0,  0,  0,208,211,211,214,215,214,211,211,208,  0,  0,  0,  0,
    0,  0,  0,208,212,212,214,215,214,212,212,208,  0,  0,  0,  0,
    0,  0,  0,204,209,204,212,214,212,204,209,204,  0,  0,  0,  0,
    0,  0,  0,198,208,204,212,212,212,204,208,198,  0,  0,  0,  0,
    0,  0,  0,200,208,206,212,200,212,206,208,200,  0,  0,  0,  0,
    0,  0,  0,194,206,204,212,200,212,204,206,194,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
};

// 残局车子力价值表,参考"象眼引擎"
const int R_b[256] = {
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,182,182,182,184,186,184,182,182,182,  0,  0,  0,  0,
    0,  0,  0,184,184,184,186,190,186,184,184,184,  0,  0,  0,  0,
    0,  0,  0,182,182,182,184,186,184,182,182,182,  0,  0,  0,  0,
    0,  0,  0,180,180,180,182,184,182,180,180,180,  0,  0,  0,  0,
    0,  0,  0,180,180,180,182,184,182,180,180,180,  0,  0,  0,  0,
    0,  0,  0,180,180,180,182,184,182,180,180,180,  0,  0,  0,  0,
    0,  0,  0,180,180,180,182,184,182,180,180,180,  0,  0,  0,  0,
    0,  0,  0,180,180,180,182,184,182,180,180,180,  0,  0,  0,  0,
    0,  0,  0,180,180,180,182,184,182,180,180,180,  0,  0,  0,  0,
    0,  0,  0,180,180,180,182,184,182,180,180,180,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
};

// 开局炮子力价值表,参考"象眼引擎"
const int C_a[256] = {
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,100,100, 96, 91, 90, 91, 96,100,100,  0,  0,  0,  0,
    0,  0,  0, 98, 98, 96, 92, 89, 92, 96, 98, 98,  0,  0,  0,  0,
    0,  0,  0, 97, 97, 96, 91, 92, 91, 96, 97, 97,  0,  0,  0,  0,
    0,  0,  0, 96, 99, 99, 98,100, 98, 99, 99, 96,  0,  0,  0,  0,
    0,  0,  0, 96, 96, 96, 96,100, 96, 96, 96, 96,  0,  0,  0,  0,
    0,  0,  0, 95, 96, 99, 96,100, 96, 99, 96, 95,  0,  0,  0,  0,
    0,  0,  0, 96, 96, 96, 96, 96, 96, 96, 96, 96,  0,  0,  0,  0,
    0,  0,  0, 97, 96,100, 99,101, 99,100, 96, 97,  0,  0,  0,  0,
    0,  0,  0, 96, 97, 98, 98, 98, 98, 98, 97, 96,  0,  0,  0,  0,
    0,  0,  0, 96, 96, 97, 99, 99, 99, 97, 96, 96,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
};

// 残局炮子力价值表,参考"象眼引擎"
const int C_b[256] = {
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,100,100,100,100,100,100,100,100,100,  0,  0,  0,  0,
    0,  0,  0,100,100,100,100,100,100,100,100,100,  0,  0,  0,  0,
    0,  0,  0,100,100,100,100,100,100,100,100,100,  0,  0,  0,  0,
    0,  0,  0,100,100,100,102,104,102,100,100,100,  0,  0,  0,  0,
    0,  0,  0,100,100,100,102,104,102,100,100,100,  0,  0,  0,  0,
    0,  0,  0,100,100,100,102,104,102,100,100,100,  0,  0,  0,  0,
    0,  0,  0,100,100,100,102,104,102,100,100,100,  0,  0,  0,  0,
    0,  0,  0,100,100,100,102,104,102,100,100,100,  0,  0,  0,  0,
    0,  0,  0,100,100,100,104,106,104,100,100,100,  0,  0,  0,  0,
    0,  0,  0,100,100,100,104,106,104,100,100,100,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
};


// 空头炮的威胁分值，指标是对红方来说的行号(即黑方要用15去减)，大体上空头炮位置越高威胁越大。进入残局时，该值要相应减少。
static const int HollowThreat[16] = {
    0,  0,  0,  0,  0,  0, 60, 65, 70, 75, 70, 35, 80,  0,  0,  0
};

// 炮镇窝心马的威胁分值，指标同上，大体上高度越低威胁越大，没有窝心马时可取四分之一。进入残局时，取值似乎不应变化。
static const int CentralThreat[16] = {
    0,  0,  0,  0,  0,  0, 60, 65, 70, 75, 70, 35, 80,  0,  0,  0
};

// 沉底炮的威胁分值，指标是列号，大体上越靠近边线威胁越大。威胁减少时，该值要相应减少。
static const int BottomThreat[16] = {
    0,  0,  0, 50, 30,  0,  0,  0,  0,  0, 30, 50, 0,  0,  0,  0
};

const int AdvisorLeakage = 80;

void Position::preEvaluate()
{
    int h;
    int x, y;
    int attacks[2] = {0};
    int pos;
    int pc;
    int i;
    quint32 bothBitPiece = *(quint32*)&bitPiece;

    // 计算开中局系数.
    h = PopCnt( bothBitPiece & (BOTH_BIT_PIECE(BIT_ROOK)) ) * 6
        + PopCnt( bothBitPiece & BOTH_BIT_PIECE(BIT_KNIGHT | BIT_CANNON) ) * 3
        + PopCnt(bothBitPiece & BOTH_BIT_PIECE(BIT_ADVISOR | BIT_BISHOP | BIT_PAWN)) * 1;

    // 二次函数处理,放大h值
    h = h*(2 * H - h) / H;

    this->preEval.advance = L * h / H;

    for(i = 0; i < 2; i++)
    {
        int kingPos = pieces[SIDE_TAG(i)];
        for(pc = SIDE_TAG(i) + ROOK_FROM; pc < SIDE_TAG(i) + ROOK_TO; pc++)
        {
            pos = this->pieces[pc];
            if( SAME_HALF(pos, kingPos) == false)
            {
                attacks[i] += 2;
            }
        }

        for(pc = SIDE_TAG(i) + CANNON_FROM; pc < SIDE_TAG(i) + PAWN_TO; pc++)
        {
            pos = this->pieces[pc];
            if( SAME_HALF(pos, kingPos) == false )
            {
                attacks[i] += 1;
            }
        }

        for(pc = SIDE_TAG(i) + KNIGHT_FROM; pc < SIDE_TAG(i) + KNIGHT_TO; pc++)
        {
            pos = this->pieces[pc];
            if( SAME_HALF(pos, kingPos) == false )
            {
                attacks[i] += 1;
            }
        }
    }

    int rAdjust = PopCnt( bitPiece[0] & (BIT_ROOK) ) * 2 + PopCnt(bitPiece[0] &(BIT_KNIGHT | BIT_CANNON));
    int bAdjust = PopCnt( bitPiece[1] & (BIT_ROOK) ) * 2 + PopCnt(bitPiece[1] &(BIT_KNIGHT | BIT_CANNON));

    if(rAdjust > bAdjust)
    {
        attacks[0] += ( rAdjust - bAdjust );
    }else
    {
        attacks[1] += ( bAdjust - rAdjust );
    }

    x = qMin(attacks[0], Y);
    y = qMin(attacks[1], Y);

    //qDebug() << h << x << y << attacks[0] << attacks[1];

    preEval.valRedAdvisorLeakage = AdvisorLeakage * y / Y;
    preEval.valBlackAdvisorLeakage = AdvisorLeakage * x / Y;
    for(i = 0; i < 16; i++)
    {
        preEval.valueRedHollowThreat[i] = HollowThreat[i] * h / H;
        preEval.valueBlackHollowThreat[0xf - i] = HollowThreat[i] * h / H;

        preEval.valueRedCentralThreat[i] = CentralThreat[i] * x / Y;
        preEval.valueBlackCentralThreat[0xf - i] = CentralThreat[i] * y / Y;

        preEval.valRedBottomThreat[i] = BottomThreat[i] * x / Y;
        preEval.valBlackBottomThreat[0xe - i] = BottomThreat[i] * y / Y;
    }

    for( i = 0; i < 255; i++ )
    {
        // 红方将,兵子力价值计算
        preEval.valueRed[0][i] = ( K_a[i] * h + K_b[i] * (H - h) ) / H;
        preEval.valueRed[6][i] = ( preEval.valueRed[0][i] * x + ( ( P_a[i] * h + P_b[i]*(H-h)) / H)  * (Y - x) ) /Y;
        // 黑方将,兵子力价值计算
        preEval.valueBlack[0][MIRROR_K1(i)] = preEval.valueRed[0][i];
        preEval.valueBlack[6][MIRROR_K1(i)] = ( preEval.valueRed[0][i] * y + ( ( P_a[i]*h + P_b[i]*(H-h)) / H)  * (Y - y) ) /Y;
        // 红方士,象子力价值计算
        preEval.valueRed[1][i] = preEval.valueRed[2][i] = ( A_a[i] * y + A_b[i] * (Y - y) ) / Y;
        // 黑方士,象子力价值计算
        preEval.valueBlack[1][MIRROR_K1(i)] = preEval.valueBlack[2][MIRROR_K1(i)] = ( A_a[i] * x + A_b[i] * (Y - x) ) / Y;
        // 红方车,马,炮子力价值计算
        preEval.valueRed[3][i] = (N_a[i] * h + N_b[i] * (H - h)) / H;
        preEval.valueRed[4][i] = (R_a[i] * h + R_b[i] * (H - h)) / H;
        preEval.valueRed[5][i] = (C_a[i] * h + C_b[i] * (H - h)) / H;
        // 黑方车,马,炮子力价值计算
        preEval.valueBlack[3][MIRROR_K1(i)] = (N_a[i] * h + N_b[i] * (H - h)) / H;
        preEval.valueBlack[4][MIRROR_K1(i)] = (R_a[i] * h + R_b[i] * (H - h)) / H;
        preEval.valueBlack[5][MIRROR_K1(i)] = (C_a[i] * h + C_b[i] * (H - h)) / H;
    }

    vlRed = vlBlack = 0;
    // 对当前局面估分.
    for(i = SIDE_TAG(0); i < SIDE_TAG(0) + 16; i++)
    {
        this->vlRed += preEval.valueRed[PIECE_TYPE(i)][pieces[i]];
    }

    for(i = SIDE_TAG(1); i < SIDE_TAG(1) + 16; i++)
    {
        this->vlBlack += preEval.valueBlack[PIECE_TYPE(i)][pieces[i]];
    }

    //qDebug() << this->vlRed << this->vlBlack;


}

